# Humanoid Latent Conditional Flow Matching (Facebook FM)
# Uses: ℝ³⁴ × S² × ℝ³⁰ manifold, GeodesicProbPath, RiemannianODESolver
# 67-dimensional state space for humanoid get-up task

defaults:
  - system: humanoid
  - _self_

name: humanoid_latent_conditional_fm
seed: 42
batch_size: 256
val_batch_size: 1024  # Validation batch size (can be larger than training)
base_lr: 1e-4
num_workers: 4

# Flow Matcher: Facebook FM version with automatic geodesics
flow_matcher:
  _target_: src.flow_matching.humanoid.latent_conditional.flow_matcher.HumanoidLatentConditionalFlowMatcher
  # Note: system, model, optimizer, scheduler, config, latent_dim are passed by training script

# Model: Latent Conditional UNet for Humanoid
model:
  _target_: src.model.universal_unet.UniversalUNet
  input_dim: 142               # embedded(67) + condition(67) + latent(8)
  output_dim: 67               # Velocity in tangent space (67-dim)
  time_embed_dim: 128          # Time embedding dimension
  hidden_dims: [256, 512, 512, 256]  # UNet hidden layers
  dropout: 0.1
  activation: silu             # SiLU/Swish activation

# Data: Humanoid endpoint dataset
data:
  _target_: src.data.humanoid_endpoint_data.HumanoidEndpointDataModule
  data_file: /common/users/dm1487/arcmg_datasets/humanoid_get_up/incremental_endpoint_dataset/train.txt
  validation_file: /common/users/dm1487/arcmg_datasets/humanoid_get_up/incremental_endpoint_dataset/validation.txt
  test_file: /common/users/dm1487/arcmg_datasets/humanoid_get_up/incremental_endpoint_dataset/test.txt
  bounds_file: /common/users/dm1487/arcmg_datasets/humanoid_get_up/humanoid_data_bounds.pkl
  batch_size: ${batch_size}
  val_batch_size: ${val_batch_size}
  num_workers: ${num_workers}

# Optimizer: AdamW
optimizer:
  _target_: torch.optim.AdamW
  lr: ${base_lr}
  weight_decay: 1e-5
  betas: [0.9, 0.999]

# Scheduler: Reduce on plateau
scheduler:
  _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
  mode: min
  factor: 0.5
  patience: 10
  min_lr: 1e-6

# Trainer: PyTorch Lightning
trainer:
  _target_: lightning.pytorch.Trainer
  max_epochs: 500
  accelerator: gpu
  devices: [0]
  precision: 32
  gradient_clip_val: 1.0
  log_every_n_steps: 10
  check_val_every_n_epoch: 1
  enable_progress_bar: true
  enable_model_summary: true
  logger:
    _target_: lightning.pytorch.loggers.TensorBoardLogger
    save_dir: "${hydra:runtime.output_dir}"
    name: ""
    version: null
  callbacks:
    - _target_: lightning.pytorch.callbacks.ModelCheckpoint
      dirpath: "${hydra:runtime.output_dir}/version_0/checkpoints"
      monitor: val_loss
      mode: min
      save_top_k: 3
      save_last: true
      filename: "epoch{epoch:02d}-val_loss{val_loss:.4f}"
      auto_insert_metric_name: false
    - _target_: lightning.pytorch.callbacks.EarlyStopping
      monitor: val_loss
      mode: min
      patience: 20
      verbose: true

# Flow matching specific settings
flow_matching:
  latent_dim: 8                    # Dimension of Gaussian latent variable (higher for 67D state)
  num_integration_steps: 100       # ODE solver steps for inference
  mae_val_frequency: 10            # Compute MAE validation every N epochs

# Hydra output directory
hydra:
  run:
    dir: outputs/${name}/${now:%Y-%m-%d_%H-%M-%S}
